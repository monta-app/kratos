// Copyright Â© 2022 Ory Corp
// SPDX-License-Identifier: Apache-2.0

// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/ory/kratos/selfservice/strategy/code (interfaces: CodePersister)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"
	time "time"

	uuid "github.com/gofrs/uuid"
	gomock "github.com/golang/mock/gomock"

	code "github.com/ory/kratos/selfservice/strategy/code"
)

// MockCodePersister is a mock of CodePersister interface.
type MockCodePersister struct {
	ctrl     *gomock.Controller
	recorder *MockCodePersisterMockRecorder
}

// MockCodePersisterMockRecorder is the mock recorder for MockCodePersister.
type MockCodePersisterMockRecorder struct {
	mock *MockCodePersister
}

// NewMockCodePersister creates a new mock instance.
func NewMockCodePersister(ctrl *gomock.Controller) *MockCodePersister {
	mock := &MockCodePersister{ctrl: ctrl}
	mock.recorder = &MockCodePersisterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCodePersister) EXPECT() *MockCodePersisterMockRecorder {
	return m.recorder
}

// CountByIdentifier mocks base method.
func (m *MockCodePersister) CountByIdentifier(arg0 context.Context, arg1 string, arg2 time.Time) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountByIdentifier", arg0, arg1, arg2)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CountByIdentifier indicates an expected call of CountByIdentifier.
func (mr *MockCodePersisterMockRecorder) CountByIdentifier(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountByIdentifier", reflect.TypeOf((*MockCodePersister)(nil).CountByIdentifier), arg0, arg1, arg2)
}

// CountByIdentifierLike mocks base method.
func (m *MockCodePersister) CountByIdentifierLike(arg0 context.Context, arg1 string, arg2 time.Time) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountByIdentifierLike", arg0, arg1, arg2)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CountByIdentifierLike indicates an expected call of CountByIdentifierLike.
func (mr *MockCodePersisterMockRecorder) CountByIdentifierLike(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountByIdentifierLike", reflect.TypeOf((*MockCodePersister)(nil).CountByIdentifierLike), arg0, arg1, arg2)
}

// CreateCode mocks base method.
func (m *MockCodePersister) CreateCode(arg0 context.Context, arg1 *code.Code) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCode", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateCode indicates an expected call of CreateCode.
func (mr *MockCodePersisterMockRecorder) CreateCode(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCode", reflect.TypeOf((*MockCodePersister)(nil).CreateCode), arg0, arg1)
}

// DeleteCodes mocks base method.
func (m *MockCodePersister) DeleteCodes(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteCodes", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteCodes indicates an expected call of DeleteCodes.
func (mr *MockCodePersisterMockRecorder) DeleteCodes(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCodes", reflect.TypeOf((*MockCodePersister)(nil).DeleteCodes), arg0, arg1)
}

// FindActiveCode mocks base method.
func (m *MockCodePersister) FindActiveCode(arg0 context.Context, arg1 uuid.UUID, arg2 time.Time) (*code.Code, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindActiveCode", arg0, arg1, arg2)
	ret0, _ := ret[0].(*code.Code)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindActiveCode indicates an expected call of FindActiveCode.
func (mr *MockCodePersisterMockRecorder) FindActiveCode(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindActiveCode", reflect.TypeOf((*MockCodePersister)(nil).FindActiveCode), arg0, arg1, arg2)
}

// UpdateCode mocks base method.
func (m *MockCodePersister) UpdateCode(arg0 context.Context, arg1 *code.Code) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCode", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

func (m *MockCodePersister) CheckCodeExistsByFlowId(ctx context.Context, flowId uuid.UUID) (bool, error) {
	return false, nil
}

// UpdateCode indicates an expected call of UpdateCode.
func (mr *MockCodePersisterMockRecorder) UpdateCode(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCode", reflect.TypeOf((*MockCodePersister)(nil).UpdateCode), arg0, arg1)
}
